name: CI

on:
  workflow_dispatch:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          # cache: 'pip'
      - uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-
      - name: Setup venv
        run: |
          python -m venv venv
          venv/Scripts/python.exe -m pip install --upgrade pip setuptools wheel
          venv/Scripts/python.exe -m pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win32
      - name: "create build dir"
        shell: cmd
        run: mkdir build
      - name: "configure cmake"
        shell: cmd
        run: cd build && cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNO_VCRUNTIME=ON -DUSE_CONFIGURE_DATE=ON -DCMAKE_INSTALL_PREFIX=../install -DGITHUB_ENV=$GITHUB_ENV ..
      - name: "cmake build"
        shell: cmd
        run: cd build && cmake --build .
      - name: "cmake install"
        shell: cmd
        run: cd build && cmake --install .
      - name: "get artifact name"
        shell: cmd
        run: |
          cd build && cmake --build . --target get_artifact_name
          set /p artifact_name=<artifact_name.txt
          echo artifact_name=%artifact_name% >> %GITHUB_ENV%
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: install/
          if-no-files-found: error
